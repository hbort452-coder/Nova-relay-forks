import java.io.File
import java.text.SimpleDateFormat
import java.util.*

fun main() {
    println("=== NovaRelay Logs Test ===")
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    val logs = mutableListOf<String>()
    val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
    
    logs.add("=== Session start ${dateFormat.format(Date())} ===")
    logs.add("[${dateFormat.format(Date())}] C->S RequestNetworkSettingsPacket RequestNetworkSettingsPacket(protocolVersion=800)")
    logs.add("[${dateFormat.format(Date())}] Fetched bedrock codec: 786 for protocol: 800")
    logs.add("[${dateFormat.format(Date())}] Sent NetworkSettings(ZLIB, threshold=0) and enabled server compression")
    logs.add("[${dateFormat.format(Date())}] C->S LoginPacket LoginPacket(protocolVersion=800, authPayload=...)")
    logs.add("[${dateFormat.format(Date())}] S->C NetworkSettingsPacket from server - BLOCKED (relay already sent its own)")
    logs.add("[${dateFormat.format(Date())}] Sending LoginPacket with protocol version: 786")
    logs.add("[${dateFormat.format(Date())}] Login success")
    logs.add("[${dateFormat.format(Date())}] S->C StartGamePacket StartGamePacket(...)")
    logs.add("[${dateFormat.format(Date())}] Start game, setting definitions")
    logs.add("[${dateFormat.format(Date())}] S->C ResourcePackStackPacket ResourcePackStackPacket(...)")
    logs.add("[${dateFormat.format(Date())}] S->C ResourcePackDataInfoPacket ResourcePackDataInfoPacket(...)")
    logs.add("[${dateFormat.format(Date())}] S->C ResourcePackChunkDataPacket ResourcePackChunkDataPacket(...)")
    logs.add("[${dateFormat.format(Date())}] Client connected successfully!")
    logs.add("=== Session end ${dateFormat.format(Date())} ===")
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    val logFile = File("test_logs.txt")
    logFile.writeText(logs.joinToString("\n"))
    
    println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã: ${logFile.absolutePath}")
    println("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${logs.size}")
    println("üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${logFile.length()} –±–∞–π—Ç")
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
    println("\nüìù –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
    logs.take(5).forEach { println("  $it") }
    
    println("\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
    println("  1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: cat test_logs.txt | xclip -selection clipboard")
    println("  2. –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏: rm test_logs.txt")
    println("  3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: cat test_logs.txt")
}